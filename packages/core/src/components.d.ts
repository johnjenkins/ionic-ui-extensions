/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { PaginationBarChangeEventDetail } from "./components/pagination-bar/pagination-bar-interface";
export namespace Components {
    interface IonXEmptyState {
        "description": string;
        "heading": string;
        "icon"?: string;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
    }
    interface IonXPaginationBar {
        "collapse": boolean;
        "fill": 'solid' | 'clear';
        /**
          * The maximum number of page number buttons that can display alongside your current page.
         */
        "maximumNeighbors": number;
        /**
          * The active page index (zero-based) of the paginated data set.
         */
        "page": number;
        /**
          * The number of results that are show per page.
         */
        "size": number;
        /**
          * The total elements that are available to be paginated.
         */
        "totalElements": number;
    }
    interface IonXTimeline {
        /**
          * `true` if the timeline orientation is horizontal.
         */
        "horizontal": boolean;
    }
    interface IonXTimelineHeader {
    }
    interface IonXTimelineItem {
        /**
          * If `true`, the timeline item will be grayed out and "disabled".
         */
        "disabled": boolean;
    }
}
declare global {
    interface HTMLIonXEmptyStateElement extends Components.IonXEmptyState, HTMLStencilElement {
    }
    var HTMLIonXEmptyStateElement: {
        prototype: HTMLIonXEmptyStateElement;
        new (): HTMLIonXEmptyStateElement;
    };
    interface HTMLIonXPaginationBarElement extends Components.IonXPaginationBar, HTMLStencilElement {
    }
    var HTMLIonXPaginationBarElement: {
        prototype: HTMLIonXPaginationBarElement;
        new (): HTMLIonXPaginationBarElement;
    };
    interface HTMLIonXTimelineElement extends Components.IonXTimeline, HTMLStencilElement {
    }
    var HTMLIonXTimelineElement: {
        prototype: HTMLIonXTimelineElement;
        new (): HTMLIonXTimelineElement;
    };
    interface HTMLIonXTimelineHeaderElement extends Components.IonXTimelineHeader, HTMLStencilElement {
    }
    var HTMLIonXTimelineHeaderElement: {
        prototype: HTMLIonXTimelineHeaderElement;
        new (): HTMLIonXTimelineHeaderElement;
    };
    interface HTMLIonXTimelineItemElement extends Components.IonXTimelineItem, HTMLStencilElement {
    }
    var HTMLIonXTimelineItemElement: {
        prototype: HTMLIonXTimelineItemElement;
        new (): HTMLIonXTimelineItemElement;
    };
    interface HTMLElementTagNameMap {
        "ion-x-empty-state": HTMLIonXEmptyStateElement;
        "ion-x-pagination-bar": HTMLIonXPaginationBarElement;
        "ion-x-timeline": HTMLIonXTimelineElement;
        "ion-x-timeline-header": HTMLIonXTimelineHeaderElement;
        "ion-x-timeline-item": HTMLIonXTimelineItemElement;
    }
}
declare namespace LocalJSX {
    interface IonXEmptyState {
        "description"?: string;
        "heading"?: string;
        "icon"?: string;
        /**
          * The mode determines which platform styles to use.
         */
        "mode"?: "ios" | "md";
    }
    interface IonXPaginationBar {
        "collapse"?: boolean;
        "fill"?: 'solid' | 'clear';
        /**
          * The maximum number of page number buttons that can display alongside your current page.
         */
        "maximumNeighbors"?: number;
        /**
          * Emitted when the selected page value changes.
         */
        "onIonChange"?: (event: CustomEvent<PaginationBarChangeEventDetail>) => void;
        /**
          * The active page index (zero-based) of the paginated data set.
         */
        "page"?: number;
        /**
          * The number of results that are show per page.
         */
        "size"?: number;
        /**
          * The total elements that are available to be paginated.
         */
        "totalElements"?: number;
    }
    interface IonXTimeline {
        /**
          * `true` if the timeline orientation is horizontal.
         */
        "horizontal"?: boolean;
    }
    interface IonXTimelineHeader {
    }
    interface IonXTimelineItem {
        /**
          * If `true`, the timeline item will be grayed out and "disabled".
         */
        "disabled"?: boolean;
    }
    interface IntrinsicElements {
        "ion-x-empty-state": IonXEmptyState;
        "ion-x-pagination-bar": IonXPaginationBar;
        "ion-x-timeline": IonXTimeline;
        "ion-x-timeline-header": IonXTimelineHeader;
        "ion-x-timeline-item": IonXTimelineItem;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ion-x-empty-state": LocalJSX.IonXEmptyState & JSXBase.HTMLAttributes<HTMLIonXEmptyStateElement>;
            "ion-x-pagination-bar": LocalJSX.IonXPaginationBar & JSXBase.HTMLAttributes<HTMLIonXPaginationBarElement>;
            "ion-x-timeline": LocalJSX.IonXTimeline & JSXBase.HTMLAttributes<HTMLIonXTimelineElement>;
            "ion-x-timeline-header": LocalJSX.IonXTimelineHeader & JSXBase.HTMLAttributes<HTMLIonXTimelineHeaderElement>;
            "ion-x-timeline-item": LocalJSX.IonXTimelineItem & JSXBase.HTMLAttributes<HTMLIonXTimelineItemElement>;
        }
    }
}
